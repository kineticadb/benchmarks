<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath">/Users/peterkim/cots/apache-jmeter-5.1.1/lib/kinetica-jdbc-7.0.16.0-jar-with-dependencies.jar,/Users/peterkim/cots/apache-jmeter-5.1.1/lib,/Users/peterkim/cots/apache-jmeter-5.1.1/lib/ext</stringProp>
    </TestPlan>
    <hashTree>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">jdbcConfig</stringProp>
        <stringProp name="dbUrl">jdbc:snowflake://{{ snowflake_account }}.snowflakecomputing.com/?warehouse=BENCHMARK_WH_{{ snowflake_tpch_warehouse_size }}&amp;db={{ snowflake_tpch_database }}&amp;schema={{ snowflake_tpch_schema }}&amp;role=SYSADMIN</stringProp>
        <stringProp name="driver">net.snowflake.client.jdbc.SnowflakeDriver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">{{ snowflake_password }}</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">{{ snowflake_user }}</stringProp>
        <stringProp name="initQuery">alter warehouse BENCHMARK_WH_{{ snowflake_tpch_warehouse_size }} resume IF SUSPENDED;
alter session set USE_CACHED_RESULT = FALSE;</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="connectionProperties"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group - TPC-H Queries" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${__P(loops,1)}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(threads,1)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">3</stringProp>
        <longProp name="ThreadGroup.start_time">1370729701000</longProp>
        <longProp name="ThreadGroup.end_time">1370729701000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">Assert responsse code contains &apos;200&apos;</stringProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TPC-H 1" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="query">select
       l_returnflag,
       l_linestatus,
       sum(l_quantity) as sum_qty,
       sum(l_extendedprice) as sum_base_price,
       sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
       sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
       avg(l_quantity) as avg_qty,
       avg(l_extendedprice) as avg_price,
       avg(l_discount) as avg_disc,
       count(*) as count_order
  from
       lineitem
 where
       l_shipdate &lt;= dateadd(day, -90, to_date(&apos;1998-12-01&apos;))
 group by
       l_returnflag,
       l_linestatus
 order by
       l_returnflag,
       l_linestatus
LIMIT 1;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultVariable">Result</stringProp>
            <stringProp name="variableNames">Col1</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TPC-H 2" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select
       s_acctbal,
       s_name,
       n_name,
       p_partkey,
       p_mfgr,
       s_address,
       s_phone,
       s_comment
  from
       part,
       supplier,
       partsupp,
       nation,
       region
 where
       p_partkey = ps_partkey
   and s_suppkey = ps_suppkey
   and p_size = 8
   and p_type like &apos;%COPPER&apos;
   and s_nationkey = n_nationkey
   and n_regionkey = r_regionkey
   and r_name = &apos;MIDDLE EAST&apos;
   and ps_supplycost = (
    select
           min(ps_supplycost)
      from
           partsupp,
           supplier,
           nation,
           region
     where
           p_partkey = ps_partkey
       and s_suppkey = ps_suppkey
       and s_nationkey = n_nationkey
       and n_regionkey = r_regionkey
       and r_name = &apos;MIDDLE EAST&apos;
       )
 order by
       s_acctbal desc,
       n_name,
       s_name,
       p_partkey
 limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">col1</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TPC-H 3" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select
       l_orderkey,
       sum(l_extendedprice*(1-l_discount)) as revenue,
       o_orderdate,
       o_shippriority
  from
       customer,
       orders,
       lineitem
where
       c_mktsegment = &apos;HOUSEHOLD&apos;
   and c_custkey = o_custkey
   and l_orderkey = o_orderkey
   and o_orderdate &lt; to_date(&apos;1995-03-15&apos;)
   and l_shipdate &gt; to_date(&apos;1995-03-15&apos;)
 group by
       l_orderkey,
       o_orderdate,
       o_shippriority
 order by
       2 desc,
       o_orderdate
 limit 10;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">col1</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TPC-H 4" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select
       o_orderpriority,
       count(*) as order_count
  from
       orders
 where
       o_orderdate &gt;= to_date(&apos;1997-08-01&apos;)
   and o_orderdate &lt; dateadd(month, 3, to_date(&apos;1997-08-01&apos;))
   and exists (
        select
               *
          from
               lineitem
         where
               l_orderkey = o_orderkey
           and l_commitdate &lt; l_receiptdate
        )
 group by
       o_orderpriority
 order by
      o_orderpriority
LIMIT 1;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">col1</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TPC-H 5" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select
       n_name,
       sum(l_extendedprice * (1 - l_discount)) as revenue
  from
       customer,
       orders,
       lineitem,
       supplier,
       nation,
       region
 where
       c_custkey = o_custkey
   and l_orderkey = o_orderkey
   and l_suppkey = s_suppkey
   and c_nationkey = s_nationkey
   and s_nationkey = n_nationkey
   and n_regionkey = r_regionkey
   and r_name = &apos;AMERICA&apos;
   and o_orderdate &gt;= to_date(&apos;1996-01-01&apos;)
   and o_orderdate &lt; dateadd(year, 1, to_date(&apos;1996-01-01&apos;))
 group by
       n_name
 order by
       2 desc
LIMIT 1;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TPC-H 6" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query"> select
       sum(l_extendedprice*l_discount) as revenue
  from
       lineitem
 where
       l_shipdate &gt;= to_date(&apos;1996-01-01&apos;)
   and l_shipdate &lt; dateadd(year, 1, to_date(&apos;1996-01-01&apos;))
   and l_discount &gt;= 0.08 and l_discount &lt;= 0.10   
   and l_quantity &lt; 25
   limit 1;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TPC-H 7" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select
       supp_nation,
       cust_nation,
       l_year, sum(v1) as revenue
  from (
    select
           n1.n_name as supp_nation,
           n2.n_name as cust_nation,
           extract(year from l_shipdate) as l_year,
           l_extendedprice * (1 - l_discount) as v1
      from
           supplier,
           lineitem,
           orders,
           customer,
           nation n1,
           nation n2
     where
           s_suppkey = l_suppkey
       and o_orderkey = l_orderkey
       and c_custkey = o_custkey
       and s_nationkey = n1.n_nationkey
       and c_nationkey = n2.n_nationkey
       and (
              (n1.n_name = &apos;UNITED KINGDOM&apos; and n2.n_name = &apos;BRAZIL&apos; ) 
		 or (n1.n_name = &apos;BRAZIL&apos; and n2.n_name = &apos;UNITED KINGDOM&apos; ) 
           )
       and l_shipdate between to_date(&apos;1995-01-01&apos;) and to_date(&apos;1996-12-31&apos;)
       ) shipping
 group by
       supp_nation,
       cust_nation,
       l_year
 order by
       supp_nation,
       cust_nation,
       l_year
 limit 1;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TPC-H 8" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select
       o_year,
       sum(case
           when nation = &apos;UNITED KINGDOM&apos;
           then v1
           else 0
           end) / sum(v1) as mkt_share
  from (
    select
           extract(year from o_orderdate) as o_year,
           l_extendedprice * (1-l_discount) as v1,
           n2.n_name as nation
      from
           part,
           supplier,
           lineitem,
           orders,
           customer,
           nation n1,
           nation n2,
           region
     where
           p_partkey = l_partkey
       and s_suppkey = l_suppkey
       and l_orderkey = o_orderkey
       and o_custkey = c_custkey
       and c_nationkey = n1.n_nationkey
       and n1.n_regionkey = r_regionkey
       and r_name = &apos;EUROPE&apos;
       and s_nationkey = n2.n_nationkey
       and o_orderdate between to_date(&apos;1995-01-01&apos;) and to_date(&apos;1996-12-31&apos;)
       and p_type = &apos;STANDARD PLATED BRASS&apos;
      ) all_nations
 group by
       o_year
 order by
       o_year
 limit 1;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TPC-H 9" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select
       nation,
       o_year,
       sum(amount) as sum_profit
  from (
    select
           n_name as nation,
           extract(year from o_orderdate) as o_year,
           l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount
      from
           part,
           supplier,
           lineitem,
           partsupp,
           orders,
           nation
     where
           s_suppkey = l_suppkey
       and ps_suppkey = l_suppkey
       and ps_partkey = l_partkey
       and p_partkey = l_partkey
       and o_orderkey = l_orderkey
       and s_nationkey = n_nationkey
       and p_name like &apos;%blanched%&apos;
       ) profit
 group by
       nation,
       o_year
 order by
       nation,
       o_year desc;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TPC-H 10" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select
       c_custkey,
       c_name,
       sum(l_extendedprice * (1 - l_discount)) as revenue,
       c_acctbal,
       n_name,
       c_address,
       c_phone,
       c_comment
  from
       customer,
       orders,
       lineitem,
       nation
 where
       c_custkey = o_custkey
   and l_orderkey = o_orderkey
   and o_orderdate &gt;= to_date(&apos;1994-10-01&apos;)
   and o_orderdate &lt; dateadd(month, 3, to_date(&apos;1994-10-01&apos;))
   and l_returnflag = &apos;R&apos;
   and c_nationkey = n_nationkey
 group by
       c_custkey,
       c_name,
       c_acctbal,
       c_phone,
       n_name,
       c_address,
       c_comment
 order by
       3 desc
 limit 20;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TPC-H 11" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select
       ps_partkey,
       sum(ps_supplycost * ps_availqty) as value
from
       partsupp,
       supplier,
       nation
where
       ps_suppkey = s_suppkey
  and s_nationkey = n_nationkey
  and n_name = &apos;MOROCCO&apos;
group by
      ps_partkey
    having
      sum(ps_supplycost * ps_availqty) &gt; (
    select
           sum(ps_supplycost * ps_availqty) * 0.0001
      from
           partsupp,
           supplier,
           nation
     where
           ps_suppkey = s_suppkey
       and s_nationkey = n_nationkey
       and n_name = &apos;MOROCCO&apos;
     )
order by
      2 desc
LIMIT 1;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TPC-H 12" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select
       l_shipmode,
       sum(case
           when o_orderpriority =&apos;1-URGENT&apos;
           or o_orderpriority =&apos;2-HIGH&apos;
           then 1
           else 0
       end) as high_line_count,
       sum(case
           when o_orderpriority &lt;&gt; &apos;1-URGENT&apos;
           and o_orderpriority &lt;&gt; &apos;2-HIGH&apos;
           then 1
           else 0
       end) as low_line_count
 from
      orders,
      lineitem
where
      o_orderkey = l_orderkey
  and l_shipmode in (&apos;RAIL&apos;, &apos;FOB&apos;)
  and l_commitdate &lt; l_receiptdate
  and l_shipdate &lt; l_commitdate
  and l_receiptdate &gt;= to_date(&apos;1994-01-01&apos;)
  and l_receiptdate &lt; dateadd(year, 1, to_date(&apos;1994-01-01&apos;))
group by
      l_shipmode
order by
      l_shipmode
LIMIT 1;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TPC-H 13" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select
       c_count,
       count(*) as custdist
  from (
    select
           c_custkey,
           count(o_orderkey) as c_count
      from
           customer
      left outer join
           orders
        on
           c_custkey = o_custkey
           and o_comment not like &apos;%pending%deposits%&apos;
           group by
           c_custkey
       ) c_orders
 group by
       c_count
 order by
       2 desc,
       c_count desc
limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TPC-H 14" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select
       100.00 * sum(case
       when p_type like &apos;PROMO%&apos;
       then l_extendedprice*(1-l_discount)
       else 0
       end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue
  from
       lineitem,
       part
 where l_partkey = p_partkey
   and l_shipdate &gt;= to_date(&apos;1994-12-01&apos;)
   and l_shipdate &lt; dateadd(month, 1, to_date(&apos;1994-12-01&apos;))
   limit 1;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TPC-H 15" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">with
  tpch_revenue as (
    select
      l_suppkey as supplier_no,
      sum(l_extendedprice * (1 - l_discount)) as total_revenue
    from
      lineitem
    where
      l_shipdate &gt;= &apos;1994-03-01&apos; and
      l_shipdate &lt;  dateadd(month, 3, to_date(&apos;1994-03-01&apos;))
    group by l_suppkey
  )
select
      s_suppkey,
      s_name,
      s_address,
      s_phone,
      total_revenue
 from
      supplier,
      tpch_revenue
where
      s_suppkey = supplier_no
      and total_revenue = (
       select
              max(total_revenue)
         from
              tpch_revenue
      )
order by
      s_suppkey   
LIMIT 1;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TPC-H 16" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select
       p_brand,
       p_type,
       p_size,
       count(distinct ps_suppkey) as supplier_cnt
  from
       partsupp,
       part
 where
       p_partkey = ps_partkey
   and p_brand &lt;&gt; &apos;Brand#34&apos;
   and p_type not like &apos;MEDIUM BURNISHED%&apos;
   and p_size in (33, 11, 13, 41, 18, 5, 34, 46)
   and ps_suppkey not in (
    select
           s_suppkey
      from
           supplier
     where
           s_comment like &apos;%Customer%Complaints%&apos;
       )
 group by
       p_brand,
       p_type,
       p_size
 order by
       4 desc,
       p_brand,
       p_type,
       p_size
LIMIT 1;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TPC-H 17" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select
       sum(l_extendedprice) / 7.0 as avg_yearly
  from
       lineitem,
       part
 where
       p_partkey = l_partkey
   and p_brand = &apos;Brand#42&apos;
   and p_container = &apos;JUMBO BAG&apos;
   and l_quantity &lt; (
    select
           0.2 * avg(l_quantity)
      from
           lineitem
     where
           l_partkey = p_partkey
      )
LIMIT 1;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TPC-H 18" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select
       c_name,
       c_custkey,
       o_orderkey,
       o_orderdate,
       o_totalprice,
       sum(l_quantity) sum_quantity
  from
       customer,
       orders,
       lineitem
 where
       o_orderkey in (
           select
                  l_orderkey
             from
                  lineitem
            group by
                  l_orderkey
           having
                  sum(l_quantity) &gt; 313
        )
   and c_custkey = o_custkey
   and o_orderkey = l_orderkey
 group by
       c_name,
       c_custkey,
       o_orderkey,
       o_orderdate,
       o_totalprice
 order by
       o_totalprice desc,
       o_orderdate
 limit 100;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TPC-H 19" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select
   sum( l_extendedprice *( 1 - l_discount )) as revenue 
from
   lineitem,
   part 
where
   (
      p_partkey = l_partkey 
      and p_brand = &apos;Brand#41&apos; 
      and p_container in
      (&apos;SM CASE&apos;, &apos;SM BOX&apos;, &apos;SM PACK&apos;, &apos;SM PKG&apos;)
      and l_quantity &gt;= 7 
      and l_quantity &lt;= 7 + 10 
      and p_size between 1 and 5 
      and l_shipmode in
      (
         &apos;AIR&apos;,
         &apos;AIR REG&apos; 
      )
      and l_shipinstruct = &apos;DELIVER IN PERSON&apos; 
   )
   or
   (
      p_partkey = l_partkey 
      and p_brand = &apos;Brand#24&apos; 
      and p_container in
      (
         &apos;MED BAG&apos;,
         &apos;MED BOX&apos;,
         &apos;MED PKG&apos;,
         &apos;MED PACK&apos; 
      )
      and l_quantity &gt;= 19 
      and l_quantity &lt;= 19 + 10 
      and p_size between 1 and 10 
      and l_shipmode in
      (
         &apos;AIR&apos;,
         &apos;AIR REG&apos; 
      )
      and l_shipinstruct = &apos;DELIVER IN PERSON&apos; 
   )
   or
   (
      p_partkey = l_partkey 
      and p_brand = &apos;Brand#22&apos; 
      and p_container in
      (
         &apos;LG CASE&apos;,
         &apos;LG BOX&apos;,
         &apos;LG PACK&apos;,
         &apos;LG PKG&apos; 
      )
      and l_quantity &gt;= 28 
      and l_quantity &lt;= 28 + 10 
      and p_size between 1 and 15 
      and l_shipmode in
      (
         &apos;AIR&apos;,
         &apos;AIR REG&apos; 
      )
      and l_shipinstruct = &apos;DELIVER IN PERSON&apos; 
   )
LIMIT 1;

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TPC-H 20" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select
       s_name,
       s_address
  from
       supplier,
       nation
 where
       s_suppkey in (
            select
                   ps_suppkey
             from
                   partsupp
            where
                   ps_partkey in (
                       select
                              p_partkey
                         from
                              part
                        where
                              p_name like &apos;cornsilk%&apos;
                  )
   and ps_availqty &gt;(
            select
                   0.5 * sum(l_quantity)
              from
                   lineitem
             where
                   l_partkey = ps_partkey
               and l_suppkey = ps_suppkey
               and l_shipdate &gt;= to_date(&apos;1994-01-01&apos;)
               and l_shipdate &lt; dateadd(year, 1, to_date(&apos;1994-01-01&apos;))
                    )
       )
   and s_nationkey = n_nationkey
   and n_name = &apos;ROMANIA&apos;
 order by
       s_name
 limit 1;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TPC-H 21" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select
       s_name,
       count(*) as numwait
  from
       supplier,
       lineitem l1,
       orders,
       nation
 where
       s_suppkey = l1.l_suppkey
   and o_orderkey = l1.l_orderkey
   and o_orderstatus = &apos;F&apos;
   and l1.l_receiptdate &gt; l1.l_commitdate
   and exists (
        select
               *
          from
               lineitem l2
         where
               l2.l_orderkey = l1.l_orderkey
           and l2.l_suppkey &lt;&gt; l1.l_suppkey
       )
   and not exists (
        select
               *
          from
               lineitem l3
         where
               l3.l_orderkey = l1.l_orderkey
           and l3.l_suppkey &lt;&gt; l1.l_suppkey
           and l3.l_receiptdate &gt; l3.l_commitdate
       )
   and s_nationkey = n_nationkey
   and n_name = &apos;ETHIOPIA&apos;
 group by
       s_name
 order by
       2 desc,
       s_name
 limit 100;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="TPC-H 22" enabled="true">
            <stringProp name="dataSource">jdbcConfig</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select
       cntrycode,
       count(*) as numcust,
       sum(c_acctbal) as totacctbal
  from (
    select
           substr(c_phone, 1, 2) as cntrycode,
           c_acctbal
      from
           customer
     where
           substr(c_phone, 1, 2) in (&apos;29&apos;, &apos;18&apos;, &apos;11&apos;, &apos;26&apos;, &apos;32&apos;, &apos;30&apos;, &apos;13&apos;)
       and c_acctbal &gt; (
            select
                   avg(c_acctbal)
              from
                   customer
             where
                   c_acctbal &gt; 0.00
               and substr(c_phone, 1, 2) in (&apos;29&apos;, &apos;18&apos;, &apos;11&apos;, &apos;26&apos;, &apos;32&apos;, &apos;30&apos;, &apos;13&apos;)
           )
       and not exists (
            select
                   *
              from
                   orders
             where
                   o_custkey = c_custkey
           )
       ) custsale
 group by
       cntrycode
 order by
       cntrycode
 limit 1;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>true</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>true</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>true</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <fileName>true</fileName>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">summary-report.tpch.csv</stringProp>
          <boolProp name="useGroupName">true</boolProp>
          <boolProp name="ResultCollector.success_only_logging">true</boolProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="SaveResponses" enabled="true">
          <stringProp name="FileSaver.filename">output/tpch_</stringProp>
          <boolProp name="FileSaver.errorsonly">false</boolProp>
          <boolProp name="FileSaver.successonly">false</boolProp>
          <boolProp name="FileSaver.skipsuffix">true</boolProp>
          <boolProp name="FileSaver.skipautonumber">false</boolProp>
          <boolProp name="FileSaver.addTimstamp">true</boolProp>
          <boolProp name="FileSaver.ignoreTC">false</boolProp>
        </ResultSaver>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <fileName>true</fileName>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">aggregate_stats.csv</stringProp>
          <boolProp name="useGroupName">true</boolProp>
          <boolProp name="ResultCollector.success_only_logging">true</boolProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>true</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <fileName>true</fileName>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
